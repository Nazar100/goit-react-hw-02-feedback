{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Statisics","good","neutral","bad","total","average","rating","className","s","list","style","color","FeedbackOptions","onLeaveFeedback","onClick","Section","title","children","Notification","message","App","state","option","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"gRAGe,SAASA,EAAT,GAA4D,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACzDC,EAASD,KAAa,GAAK,QAAU,MAEzC,OACE,qBAAIE,UAAWC,IAAEC,KAAjB,UACE,uCAAUR,KACV,0CAAaC,KACb,sCAASC,KACT,yCAAYC,OACZ,qBAAIM,MAAO,CAAEC,MAAOL,GAApB,qBAAuCD,IAAvC,U,oBCTS,SAASO,EAAT,GAA+C,IAApBC,EAAmB,EAAnBA,gBACxC,OACE,qBAAIN,UAAWC,IAAEC,KAAjB,UACE,6BACE,wBACEK,QAAS,WACPD,EAAgB,SAFpB,oBAQF,6BACE,wBAAQC,QAAS,kBAAMD,EAAgB,YAAvC,uBAEF,6BACE,wBAAQC,QAAS,kBAAMD,EAAgB,QAAvC,sBCjBO,SAASE,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,6BAAKD,IACJC,KCJQ,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,I,IC6DCC,E,4MAzDbC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,gBAAkB,SAAAS,GAChB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAASE,EAAUF,GAAU,O,EAIlCG,mBAAqB,WAAO,IAAD,EACM,EAAKJ,MAIpC,OALyB,EACjBpB,KADiB,EACXC,QADW,EACFC,K,EAOzBuB,gCAAkC,WAAO,IAAD,EACP,EAAKL,MAA5BpB,EAD8B,EAC9BA,KAAMC,EADwB,EACxBA,QAASC,EADe,EACfA,IAIvB,OAFcwB,KAAKC,MAAO3B,GAAQA,EAAOC,EAAUC,GAAQ,M,uDAKnD,IAAD,EACwB0B,KAAKR,MAA5BpB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,gCACE,cAACY,EAAD,CAASC,MAAM,6BAAf,SACE,cAACJ,EAAD,CAAiBC,gBAAiBgB,KAAKhB,oBAGxCgB,KAAKJ,qBAAuB,GAC3B,cAACV,EAAD,CAASC,MAAM,aAAf,SACE,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,KAAKJ,mBACZpB,QAASwB,KAAKH,oCAKW,IAA9BG,KAAKJ,sBACJ,cAACP,EAAD,CAAcC,QAAQ,6B,GAnDdW,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,KAAO,iC","file":"static/js/main.49f6b72e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nexport default function Statisics({ good, neutral, bad, total, average }) {\n  let rating = average() >= 50 ? 'green' : 'red';\n\n  return (\n    <ul className={s.list}>\n      <li>Good:{good}</li>\n      <li>Neutral:{neutral}</li>\n      <li>Bad:{bad}</li>\n      <li>Total: {total()}</li>\n      <li style={{ color: rating }}>Average:{average()}%</li>\n    </ul>\n  );\n}\n\nStatisics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.func.isRequired,\n  average: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nexport default function FeedbackOptions({ onLeaveFeedback }) {\n  return (\n    <ul className={s.list}>\n      <li>\n        <button\n          onClick={() => {\n            onLeaveFeedback('good');\n          }}\n        >\n          Good\n        </button>\n      </li>\n      <li>\n        <button onClick={() => onLeaveFeedback('neutral')}>Neutral</button>\n      </li>\n      <li>\n        <button onClick={() => onLeaveFeedback('bad')}>Bad</button>\n      </li>\n    </ul>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Section({ title, children }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <h1>{message}</h1>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = option => {\n    this.setState(prevState => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n\n    let total = good + neutral + bad;\n\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n\n    let average = Math.round((good / (good + neutral + bad)) * 100);\n\n    return average;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div>\n        <Section title=\"Please leave your feedback\">\n          <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n\n        {this.countTotalFeedback() > 0 && (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback}\n              average={this.countPositiveFeedbackPercentage}\n            />\n          </Section>\n        )}\n\n        {this.countTotalFeedback() === 0 && (\n          <Notification message=\"No feedback given\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3oKT7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__2lRUp\"};"],"sourceRoot":""}